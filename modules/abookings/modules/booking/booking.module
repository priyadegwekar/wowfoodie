<?php

/**
 * @file
 * Contains booking.module.
 *
 * In this module, fe refers to front-end (for guests), be refers to back-end
 * (for the owner when logged in).
 */

/**
 * CONTENTS
 *
 * booking_help()
 * booking_theme()
 * booking_preprocess_page()
 * booking_form_alter()
 * get_line_items()
 * get_line_item_node_form()
 * get_manual_emails_form()
**/

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\Entity\Node;

module_load_include('inc', 'booking', 'includes/history');
module_load_include('inc', 'booking', 'includes/costs');
module_load_include('inc', 'booking', 'includes/form_manipulators');


/**
 * Implements hook_help().
 */
function booking_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the booking module.
    case 'help.page.booking':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Fieldable booking entity with start and end dates, status, and guest fields.') . '</p>';
      return $output;

    default:
  }
}



/**
 * Implements hook_theme().
 */
function booking_theme() {
  return [
    'booking' => [
      'template' => 'booking',
      'render element' => 'children',
    ],
  ];
}


/**
 * Implements template_preprocess_page().
 */
function booking_preprocess_page(&$variables) {
  // kint($variables, '$variables');
  // \Drupal::service('path.matcher')->matchPath($path_alias, $pages);

  $route_name = \Drupal::routeMatch()->getRouteName();
  // kint($route_name, '$route_name');
  if ($route_name == 'entity.node.edit_form') {
    if ($variables['node']->getType() == 'booking') {

      $variables['page']['highlighted']['line_item_form'] = [
        '#type' => 'details',
        // '#group' => 'costs',
        '#title' => t('Add New Addition / Deduction / Payment'),
        'form' => get_line_item_node_form(),
        '#weight' => 0,
      ];

      $variables['page']['highlighted']['manual_emails_form'] = [
        '#type' => 'details',
        // '#group' => 'costs',
        '#title' => t('Manually send email'),
        'form' => get_manual_emails_form($variables['node']),
        '#weight' => 0,
      ];

    }
  }
}



/**
 * Implements hook_form_alter().
 *
 * Simplifies the booking form for display on the website's Book page, and adds validation and submission hanlders.
 */
function booking_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // kint($form, '$form');
  // kint($form_state, '$form_state');
  // kint($form_id, '$form_id');

  $build_info_args = $form_state->getBuildInfo()['args'];
  // kint($build_info_args, '$build_info_args');


  if ($form_id === 'node_booking_form' || $form_id === 'node_booking_edit_form') {
    all_booking_form_alter($form, $form_state, $form_id);
  }

  switch ($form_id) {
    // Form for editing existing booking nodes
    case 'node_booking_edit_form':
      break;

    // Form for creating new booking nodes
    case 'node_booking_form':
      $form['actions']['publish']['#value'] = t('Book');
      $form['actions']['submit']['#value'] = t('Book');

      if (in_array("/book", $build_info_args)) {
        // kint('is front-end booking form');
        fe_booking_form_alter($form, $form_state, $form_id);
      }
      break;

    case 'node_line_item_form':
      if (in_array('booking/edit', $build_info_args)) {
        line_item_form_alter($form, $form_state, $form_id);
      }
      break;
  }
}



/**
 *
 */
function get_line_items($booking_nid, $type) {
  $l_items = [];

  $query = \Drupal::entityQuery('node');
  $query
    ->condition('status', 1)
    ->condition('type', 'line_item')
    ->condition('field_booking.target_id', $booking_nid, '=');
    // ->range(0, 1) // Just for development

  if (isset($type)) {
    $query->condition('field_type.value', $type, '=');
  }

  $results = $query->execute();
  // kint($results, '$results');

  // Save the array in the format: ['nid' => node].
  foreach ($results as $rid => $nid) {
    $l_items[$nid] = node_load($nid);
  }
  // kint($l_items, '$l_items');

  return $l_items;
}


function get_line_item_node_form() {
  $new_node_values = array(
    'type' => 'line_item',
    // 'title' => 'line_item',
  );

  $new_l_item = \Drupal::entityTypeManager()
    ->getStorage('node')
    ->create($new_node_values);

  $form_oject = \Drupal::entityTypeManager()
    ->getFormObject('node', 'default')
    ->setEntity($new_l_item);

  $booking_node_form = \Drupal::formBuilder()->getForm($form_oject, 'booking/edit');
  // kint($booking_node_form, '$booking_node_form');
  return $booking_node_form;
}


function get_manual_emails_form(Node $node) {
  $booking_node_form = \Drupal::formBuilder()->getForm(
    'Drupal\abookings\Form\ManualEmailsForm', $node);
  // kint($booking_node_form, '$booking_node_form');
  return $booking_node_form;
  // return '';
}
